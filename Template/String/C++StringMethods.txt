1.构造函数
 string();
 string( size_type length, char ch );	//连续length个ch字符
 string( const char *str );	//拷贝
 string( const char *str, size_type length );	//指定长度拷贝
 string( string &str, size_type index, size_type length );
				//指定切割拷贝
2.添加文本 append
	this + a == appen(string a)
 basic_string &append( const basic_string &str, size_type index, size_type len );
		//末尾加上str的index到index+len
 basic_string &append( const char *str, size_type num );	//末尾加前num个str内容
 basic_string &append( size_type num, char ch );	//末尾加num个ch

3.赋值	assign
	用法同append
	
4.杂项
	s[2]=s.at(2);	//返回指定位置
	s.begin();返回头迭代器
	s.end();
	s.empty();
	s.size(),s.length();
	s.max_size();最大字符数
	s.rbegin();逆向迭代器
	s.rend();逆向迭代器的终点
	reserve(num)保留num个位置
5.c_str()
	返回一个指向正规C字符串的指针，内容为自己

6. 比较 compare
	a.compare(b)	//大于0为大于，等于0为等于，小于0为小于
  int compare( size_type index, size_type length, const basic_string &str );
	//自己index到index+length的字串和str比
  int compare( size_type index, size_type length, const basic_string &str, size_type index2,
  size_type length2 );
	//两个字串比较
  int compare( size_type index, size_type length, const char *str, size_type length2 );

7.删除 erase
  iterator erase( iterator pos );	//删除某个字符，返回指向下一个字符的迭代器
  iterator erase( iterator start, iterator end );	//返回指向下一个字符的迭代器
  basic_string &erase( size_type index = 0, size_type num = npos );
	//删除index到index+num的字符，返回*this

8.find()
  size_type find( const basic_string &str, size_type index );
	//str在字符串从index开始中第一次出现的位置，没找到返回string::npos;
  size_type find( const char *str, size_type index );
  size_type find( const char *str, size_type index, size_type length );
	//str在index开始到index+len中第一次出现的位置，失败返回string::npos;
  size_type find( char ch, size_type index );
	//返回字符ch从index开始第一次出现的位置。失败同上。

9.find_first_of()
  size_type find_first_of( const char *str, size_type index = 0 );
	//从index查找第一个与str中的某个字符匹配的字符，返回它的位置。失败返回string::npos 
  size_type find_first_of( const char *str, size_type index, size_type num );
	//同上，最多搜索num个
  size_type find_first_of( char ch, size_type index = 0 );	//同find

10.find_first_not_of 
	用法同上，返回与某字符串所有字符都不匹配的位置。

11.find_last_of,,,find_last_not_of,,rfind()
	用法同first，只是从最后往前找。
	
12.插入 insert
  basic_string &insert( size_type index, const char *str );
	//index前插入str
  basic_string &insert( size_type index1, const basic_string &str, size_type index2, size_type num );
	//index前插入str自串
  basic_string &insert( size_type index, const char *str, size_type num );
	//index前插入str前num个
  basic_string &insert( size_type index, size_type num, char ch );
	//字符串index位置前插入num个ch
  void insert( iterator i, size_type num, const char &ch );
	//迭代器i前插num个ch
  void insert( iterator i, iterator start, iterator end );
	//迭代器i前插入迭代器start和end之间的所有字符。

13.替换 replace
  basic_string &replace( size_type index, size_type num, const char *str );
	//str的index开始后num个替换本字符串
  basic_string &replace( size_type index, size_type num1, const char *str, size_type num2 );
	//同上，最多替换num1个
  basic_string &replace( size_type index, size_type num1, size_type num2, char ch );
	//用num2个ch字符替换本字符串中的字符，从index开始 
  basic_string &replace( iterator start, iterator end, const char *str );
	//用start和end之间的字符替换本字符串
  basic_string &replace( iterator start, iterator end, const char *str, size_type num );
	//用str中的num个字符替换本字符串中的内容,迭代器start和end指示范围， 
  basic_string &replace( iterator start, iterator end, size_type num, char ch );
	//用num个ch字符替换本字符串中的内容，迭代器start和end指示范围
	
14.substr
	substr(index,num)//返回从index到num的字串
	substr(index)//返回从index到最后

15.swap
	a.swap(b);
	交换字符串内容